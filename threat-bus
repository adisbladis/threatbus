#!/usr/bin/env python

import argparse
import asyncio
import coloredlogs
import confuse
import logging
import sys

from threatbus import Controller, MISP, VAST, Zeek


PYTHON_3_6 = (3, 6, 6, 'final', 0)

def async_run(f):
    if sys.version_info <= PYTHON_3_6:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(f)
        loop.close()
    else:
        asyncio.run(f)

# The valid schema for the configuration.
log_levels = ['CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG']

# Allows a config field to be optional. For details, see the discussion at:
# https://github.com/sampsyo/confuse/issues/45
class OptionalMappingTemplate(confuse.MappingTemplate):
    def __init__(self, mapping):
        subtemplates = {}
        for key, typ in mapping.items():
            template = confuse.as_template(typ)
            template.default = None
            subtemplates[key] = template
        self.subtemplates = subtemplates
        self.default = None
    def value(self, view, template=None):
        out = confuse.AttrDict()
        for key, typ in self.subtemplates.items():
            x = typ.value(view[key], self)
            if x:
                out[key] = x
        return out if out else None

def optional(xs):
    return OptionalMappingTemplate(xs)

template = {
    'logger': {
        'console': bool,
        'file': bool,
        'filename': str,
        'console_verbosity': confuse.Choice(log_levels),
        'file_verbosity': confuse.Choice(log_levels),
    },
    'producers': {
        'misp': {
            'rest': {
                'url': str,
                'ssl': bool,
                'api_key': str,
            },
            'zmq': optional({
                'host': str,
                'port': int,
            }),
            'kafka': optional({
                'attribute_topic': str,
                'config': dict,
            }),
            'snapshot': {
                'raw': bool,
                'search': dict,
            },
        },
    },
    'consumers': {
        'zeek': optional({
            'host': str,
            'port': int,
            'topic': str,
        }),
        'vast': optional({
            'executable': str,
            'max_results': int,
            'time_window': str,
        }),
    },
}

async def main():
    """The main function"""
    # Setup configuration
    lazy_config = confuse.LazyConfig('ThreatBus', __name__)
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--config',
        '-c',
        help='path to a configuration file')
    parser.add_argument(
        '--quiet',
        '-q',
        dest='logger.console',
        action='store_false',
        help='do not log to console')
    parser.add_argument(
        "--misp-rest-uri",
        "-m",
        dest="producers.misp.rest.url",
        help="The REST API host of the MISP instance")
    parser.add_argument(
        "--misp-zmq-host",
        "-0",
        dest="producers.misp.zmq.host",
        help="The ZMQ host configured with MISP")
    parser.add_argument(
        "--zeek-host",
        "-z",
        dest="consumers.zeek.host",
        help="The Zeek host running the integration scripts")
    parser.add_argument(
        "--dump-all-zeek-intel",
        action='store_true',
        help="connects to Zeek and dumps all intel")
    parser.add_argument(
        "--dump-zeek-intel",
        help="connects to Zeek and dumps intel from a given source")
    args = parser.parse_args()
    if args.config:
        lazy_config.set_file(args.config)
    lazy_config.set_args(args, dots=True)
    config = lazy_config.get(template)
    # Setup logging.
    logger = logging.getLogger('threat-bus')
    logger.setLevel(logging.DEBUG) # FIXME: compute min(file, console)
    fmt = "%(asctime)s %(levelname)-8s [%(name)s] %(message)s"
    colored_formatter = coloredlogs.ColoredFormatter(fmt)
    plain_formatter = logging.Formatter(fmt)
    if config.logger.file:
        fh = logging.FileHandler(config.logger.filename)
        fh.setLevel(config.logger.file_verbosity)
        fh.setFormatter(plain_formatter)
        logger.addHandler(fh)
    if config.logger.console:
        ch = logging.StreamHandler()
        ch.setLevel(config.logger.console_verbosity)
        ch.setFormatter(colored_formatter)
        logger.addHandler(ch)
    class ShutdownHandler(logging.Handler):
        def emit(self, record):
            logging.shutdown()
            sys.exit(1)
    sh = ShutdownHandler(level=50)
    sh.setFormatter(colored_formatter)
    logger.addHandler(sh)
    # Sanity check configuration. This should ideally move into the template
    # itself.
    if not config.producers.misp:
        logger.critical("MISP intel producer not configured")
    if not (config.consumers.vast or config.consumers.zeek):
        logger.critical("no intel consumer provided; configure VAST or Zeek")
    # Setup VAST
    vast = None
    if config.consumers.vast:
        executable = config.consumers.vast.executable
        if not executable:
            logger.critical(f"could not find VAST at {executable}")
        vast = VAST(config.consumers.vast)
        vast_status = await vast.status()
        vast_threads = vast_status['system']['worker-threads']
        logger.info(f"found VAST running with {vast_threads} threads")
    # Setup MISP.
    misp = None
    if config.producers.misp:
        globals()["pymisp"] = __import__("pymisp")
        misp = MISP(config.producers.misp)
    # Connect to Zeek.
    zeek = None
    if config.consumers.zeek:
        globals()["broker"] = __import__("broker")
        globals()["broker.zeek"] = __import__("broker.zeek")
        zeek = Zeek(config.consumers.zeek)
        if args.dump_all_zeek_intel:
            zeek.dump_intel()
        if args.dump_zeek_intel:
            zeek.dump_intel(args.dump_zeek_intel)
    # Create controller.
    controller = Controller(vast, misp, zeek)
    await controller.run()

if __name__ == '__main__':
    async_run(main())
